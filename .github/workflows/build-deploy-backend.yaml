name: CI/CD Pipeline for Quarkus Docker Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend_v2/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend_v2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build with Maven
        run: |
          cd backend_v2
          mvn -B clean package -DskipTests

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and set image tag
        run: |
          if test "${{ github.ref_name }}" = "main"; then tag="latest"; else tag="dev"; fi
          echo "IMAGE_TAG=${tag}" >> "$GITHUB_ENV"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend_v2
          file: ./backend_v2/src/main/docker/Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/pepper-backend:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VM (SSH)
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd docker
            docker compose down --rmi all
            docker compose build --no-cache
            docker compose up -d

#            if [ $(docker ps -q -f name=backend) ]; then
#              docker stop backend
#              docker rm backend
#            fi
#
#            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
#
#            docker run -d \
#              --env-file .env \
#              --network pepperdb_postgres \
#              --name backend \
#              -p 8080:8080 \
#              --restart unless-stopped \
#              ${{ secrets.DOCKER_USERNAME }}/backend:latest